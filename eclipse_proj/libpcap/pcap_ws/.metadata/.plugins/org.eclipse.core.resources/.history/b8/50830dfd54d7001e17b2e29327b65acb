/*
 * main.c
 *
 *  Created on: Feb 26, 2024
 *      Author: ismael
 */


/* Compile with: gcc main.c -lpcap */
//#include <stdio.h>
////#include <pcap/pcap.h>
////#include <pcap-int.h>
//
//#include <net/ethernet.h>
//#include <netinet/ip.h>
//#include <netinet/in.h>
//#include <netinet/tcp.h>
//#include <arpa/inet.h>
#include <string.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <stdio.h>
#include <pcap.h>


#include "msg_validator.h"

#define LINE_LEN 16
#define SRC_FILE "20231219_114436___T0003.pcap"



typedef struct udp_t
{
	uint16_t source_port;
	uint16_t dest_port;
	uint16_t length;
	uint16_t checksum;
}udp;







#define MAX_BUFF_SIZE 5u * 1024u

uint8_t buff[MAX_BUFF_SIZE] = {0};

OBJC_rad_raw_data_S radarData[32 *1024] = {0};


void dispatcher_handler(u_char *, const struct pcap_pkthdr *, const u_char *);
void my_packet_handler( u_char *args, const struct pcap_pkthdr *header, const u_char *packet );







void bigTosmall_endian(uint8_t *data,uint16_t size)
{
	uint16_t i = 0;
	uint8_t temp = 0;

	for(i = 0; i < size/2; i++)
	{
		/**/
		temp = data[i];
		data[i] = data[(size-1)-i];
		data[(size-1)-i] = temp;
	}
	printf("here\n");

}



int main()
{
	pcap_t *fp;
	char errbuf[PCAP_ERRBUF_SIZE];
	char source[PCAP_BUF_SIZE];
	char err_buff[PCAP_BUF_SIZE];

    struct bpf_program filter;
//    char filter_exp[] = "src port 192.168.1.201 dst port 192.168.1.255";
    char filter_exp[] = "src net 192.168.1.201 && dst net 192.168.1.255";
    bpf_u_int32 subnet_mask, ip;


    if ( (fp = pcap_open_offline(SRC_FILE,err_buff)) == NULL)
	{
		fprintf(stderr,"\nUnable to open the file %s.\n", source);

	}

    if (pcap_compile(fp, &filter, filter_exp, 0, ip) == -1)
    {
        printf("Bad filter - %s\n", pcap_geterr(fp));
        return 2;
    }

    if (pcap_setfilter(fp, &filter) == -1) {
        printf("Error setting filter - %s\n", pcap_geterr(fp));
        return 2;
    }

    // read and dispatch packets until EOF is reached
    pcap_loop(fp, 0, my_packet_handler, NULL);

    return 0;
}



void dispatcher_handler(u_char *temp1,
                        const struct pcap_pkthdr *header, const u_char *pkt_data)
{
    u_int i=0;


    /* print pkt timestamp and pkt len */
    printf("%ld:%ld (%ld)\n", header->ts.tv_sec, header->ts.tv_usec, header->len);

    /* Print the packet */
    for (i=1; (i < header->caplen + 1 ) ; i++)
    {
        printf("%.2x ", pkt_data[i-1]);
        if ( (i % LINE_LEN) == 0) printf("\n");
    }

    printf("\n\n");

}





/* Finds the payload of a TCP/IP packet */
void my_packet_handler(
    u_char *args,
    const struct pcap_pkthdr *header,
    const u_char *packet
)
{
	static uint frameCounter;
	static udp udpinfo;

	printf("frame: %d\n",frameCounter++);

    /* First, lets make sure we have an IP packet */
    struct ether_header *eth_header;
    eth_header = (struct ether_header *) packet;
    if (ntohs(eth_header->ether_type) != ETHERTYPE_IP) {
        printf("Not an IP packet. Skipping...\n\n");
        return;
    }

    /* The total packet length, including all headers
       and the data payload is stored in
       header->len and header->caplen. Caplen is
       the amount actually available, and len is the
       total packet length even if it is larger
       than what we currently have captured. If the snapshot
       length set with pcap_open_live() is too small, you may
       not have the whole packet. */
    printf("Total packet available: %d bytes\n", header->caplen);
    printf("Expected packet size: %d bytes\n", header->len);

    /* Pointers to start point of various headers */
    const u_char *ip_header;
    const u_char *tcp_header;
    const u_char *payload;

    /* Header lengths in bytes */
    int ethernet_header_length = 14; /* Doesn't change */
    int ip_header_length;
    int tcp_header_length;
    int payload_length;

    static uint8_t payload_numfragment;
    static uint8_t payload_identication[2];



    uint8_t  payload_fragment;
    static uint16_t  payload_fragment_len;

    static uint32_t payload_fragment_offset;

    u_char *temp_pointer;

    /* Find start of IP header */
    ip_header = packet + ethernet_header_length;
    /* The second-half of the first byte in ip_header
       contains the IP header length (IHL). */
    ip_header_length = ((*ip_header) & 0x0F);
    /* The IHL is number of 32-bit segments. Multiply
       by four to get a byte count for pointer arithmetic */
    ip_header_length = ip_header_length * 4;
    printf("IP header length (IHL) in bytes: %d\n", ip_header_length);

    /* Now that we know where the IP header is, we can
       inspect the IP header for a protocol number to
       make sure it is TCP before going any further.
       Protocol is always the 10th byte of the IP header */
    u_char protocol = *(ip_header + 9);

//   if (protocol != IPPROTO_TCP) {
    if (protocol != IPPROTO_UDP) {
        printf("Not a TCP packet. Skipping...\n\n");
        return;
    }



   payload_fragment        = (*(packet + 20) & 0xE0) >> 5;
   printf("fragmented payload?: %d\n",payload_fragment);


    /* Add the ethernet and ip header length to the start of the packet
       to find the beginning of the TCP header */
    tcp_header = packet + ethernet_header_length + ip_header_length;
    /* TCP header length is stored in the first half
       of the 12th byte in the TCP header. Because we only want
       the value of the top half of the byte, we have to shift it
       down to the bottom half otherwise it is using the most
       significant bits instead of the least significant bits */
    tcp_header_length = ((*(tcp_header + 12)) & 0xF0) >> 4;
    /* The TCP header length stored in those 4 bits represents
       how many 32-bit words there are in the header, just like
       the IP header length. We multiply by four again to get a
       byte count. */
    tcp_header_length = tcp_header_length * 4;
    printf("TCP header length in bytes: %d\n", tcp_header_length);

    /* Add up all the header sizes to find the payload offset */
    int total_headers_size = ethernet_header_length+ip_header_length+tcp_header_length;
    printf("Size of all headers combined: %d bytes\n", total_headers_size);
    payload_length = header->caplen -
        (ethernet_header_length + ip_header_length + tcp_header_length);
    printf("Payload size: %d bytes\n", payload_length);
    payload = packet + total_headers_size;
    printf("Memory address where payload begins: %p\n\n", payload);




    /* Print payload in ASCII */
//    if (payload_length > 0) {
////        const u_char *temp_pointer = payload;
//        const u_char *temp_pointer = packet;
//        int byte_count = 0;
//        while (byte_count++ < payload_length) {
//            printf("0x%x ", *temp_pointer);
//            temp_pointer++;
//            if ( (byte_count % LINE_LEN) == 0) printf("\n");
//
//        }
//        printf("\n");
//    }

	temp_pointer = packet + 18;


	if(payload_numfragment == 0)
	{
		payload_fragment_offset = 0;
		payload_identication[0] = *temp_pointer;

		temp_pointer = packet + 34;

		memcpy(&udpinfo, temp_pointer,sizeof(udp));

		bigTosmall_endian(&udpinfo.length,2);


		temp_pointer = packet + 34 + 8;

		if(udpinfo.length > 1480)
		{
			payload_fragment_len = 1472;

			udpinfo.length = udpinfo.length - payload_fragment_len;
		}
		else
		{
			payload_fragment_len = udpinfo.length;
		}

	 	printf("payload_fragment_offset: %d\n",payload_fragment_offset);
		memcpy(&buff[payload_fragment_offset], temp_pointer,sizeof(uint8_t) * payload_fragment_len);
		payload_fragment_offset = payload_fragment_offset + payload_fragment_len;

	}
	else
	{
		temp_pointer = packet + 34;

		if(udpinfo.length >= 1480)
		{
			payload_fragment_len = 1480;

			udpinfo.length = udpinfo.length - payload_fragment_len;
		}
		else
		{
			payload_fragment_len = udpinfo.length;
		}

	 	printf("payload_fragment_offsets: %d\n",payload_fragment_offset);
		memcpy(&buff[payload_fragment_offset], temp_pointer,sizeof(uint8_t) * payload_fragment_len);
		payload_fragment_offset = payload_fragment_offset + payload_fragment_len;

	}

    if(payload_fragment)
    {
    	payload_numfragment++;
    }
    else
    {




    	int8_t valid_message =  check_validMessage(buff);

    	printf("valid message? : %d\n", valid_message);

    	if(valid_message == 0)
    	{
        	uint16_t ptrOffset = 0;
        	check_zipyheader_len(buff, &ptrOffset);
        	printf("pointer offset: %d\n",ptrOffset);

        	u32 SERL_OBJ_DecodeStruct_OBJC_rad_raw_data_S(
        	    &buff[ptrOffset],
        	    const u32 byteArrayLength,
        	    struct OBJC_rad_raw_data_S* const p_value);





    	}


    	payload_numfragment = 0;
    	payload_fragment_len = 0;
    	payload_fragment_offset = 0;
    	memset((void*) &buff[0],0, sizeof(uint8_t) * MAX_BUFF_SIZE);
    }

    return;
}
